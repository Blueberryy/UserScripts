name: Update User Script Versions

on:
  schedule:
    - cron: '0 0 * * *'  # 每天的 UTC 时间 0 点，即中国时间的早上 8 点
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  update-versions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout code
        with:
          token: ${{ secrets.MY_GITHUB_TOKEN }}  # 使用你创建的 Token

      - name: Debug file list
        run: |
          cat docs/ScriptsPath.txt  # 打印 docs/ScriptsPath.txt 文件内容以进行调试

      - name: Extract current version
        id: extract_version
        run: |
          while IFS= read -r file; do
            echo "Processing file: \"$file\""
            if [ -f "$file" ]; then
              current_version=$(awk '/^\/\/ @version/ {print $NF}' "$file")
              echo "Current version for $file: $current_version"
              
              if [ -z "$current_version" ]; then
                echo "Version number not found in the script file: $file"
                exit 1
              fi
              
              # 将版本号中的.替换为空格，以便进行加法操作
              version_number=$(echo "$current_version" | sed 's/\./ /g')
              
              # 将版本号转换为数字并加1
              version_number=$(echo $version_number | awk '{printf "%d", ($1*1000000 + $2*10000 + $3*100 + $4 + 1)}')
              
              # 还原为4部分版本号，并分割为数组
              major=$((version_number / 1000000))
              minor=$(( (version_number % 1000000) / 10000 ))
              patch=$(( (version_number % 10000) / 100 ))
              build=$(( version_number % 100 ))
              
              # 生成新的版本号
              new_version="$major.$minor.$patch.$build"
              echo "New version for $file: $new_version"
              
              # 替换版本号
              sed -i "s|// @version[ ]\+[0-9]*\([.][0-9]*\)*|// @version $new_version|" "$file"
              
              # 将新的版本号添加到环境变量中
              echo "${file}_NEW_VERSION=$new_version" >> $GITHUB_ENV
            else
              echo "Script file not found: $file"
              exit 1
            fi
          done < docs/ScriptsPath.txt

      - name: Debug environment variables
        run: |
          cat $GITHUB_ENV  # 打印环境变量以进行调试

      - name: Debug changes
        run: |
          git status
          git diff  # 打印更改的差异以进行调试

      - name: Pull remote changes
        run: |
          git fetch origin  # 仅拉取更新，不合并
          git reset --hard origin/main  # 强制重置本地 main 分支为远程 main 分支的状态

      - name: Debug before pushing changes
        run: |
          git log -1  # 打印最近的一次提交记录
          git diff  # 打印未提交的更改（如果有的话）

      - name: Commit and push changes
        run: |
          # 配置 Git 用户
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 将更改添加到 Git 中
          git add .
          
          # 提交更改
          commit_message="Update versions to ${{ env.FILES_LIST_NEW_VERSIONS }}"
          git commit -m "$commit_message" || echo "No changes to commit"
          
          # 推送更改并强制覆盖远程分支
          git push origin main --force
        env:
          MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}  # 传递 Token 到 Git 环境变量中
